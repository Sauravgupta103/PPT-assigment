{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e315ca04-cfbb-4c60-952d-10f7f664f0c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ans 1\n",
    "def arrayPairSum(nums):\n",
    "    nums.sort()  \n",
    "    max_sum = 0  \n",
    "\n",
    "    for i in range(0, len(nums), 2):  \n",
    "        max_sum += min(nums[i], nums[i+1])\n",
    "\n",
    "    return max_sum  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9cbf74d9-3877-41b5-ba05-bb8fad9bcce5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "nums = [1, 4, 3, 2]\n",
    "print(arrayPairSum(nums))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "38aff290-21d9-4932-bd8b-f139d2e0f39f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#ans2\n",
    "def distributeCandies(candyType):\n",
    "    unique_count = len(set(candyType))  \n",
    "    max_candies = min(unique_count, len(candyType) // 2) \n",
    "    return max_candies  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1fb8e59f-58bd-42f7-b66b-5e04d15cb8e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "candyType = [1, 1, 2, 2, 3, 3]\n",
    "print(distributeCandies(candyType))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "54b5fa1f-1e44-488b-82ba-32a6678f707f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#ans-3\n",
    "def findLHS(nums):\n",
    "    num_counts = {}\n",
    "    \n",
    "    for num in nums:\n",
    "        num_counts[num] = num_counts.get(num, 0) + 1\n",
    "        \n",
    "    max_length = 0\n",
    "    \n",
    "    for num in num_counts:\n",
    "        if num + 1 in num_counts:\n",
    "            max_length = max(max_length, num_counts[num] + num_counts[num + 1])\n",
    "    \n",
    "    return max_length\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "68ccec78-bdab-4a47-b0ce-02f9875e2f40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    "nums = [1, 3, 2, 2, 5, 2, 3, 7]\n",
    "print(findLHS(nums))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "93c31fb4-b529-4eda-bcac-24629c02f6c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def maximumProduct(nums):\n",
    "    nums.sort()\n",
    "    n = len(nums)\n",
    "    return max(nums[n-1] * nums[n-2] * nums[n-3], nums[0] * nums[1] * nums[n-1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "49535a52-93cd-4bcd-918f-7829959c5441",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    }
   ],
   "source": [
    "nums = [1, 2, 3]\n",
    "print(maximumProduct(nums))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2bf33f2-022d-4c9e-9c1f-758d1e2d42a5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
